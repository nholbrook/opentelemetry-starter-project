// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.github.nholbrook.foodfinder";
option java_outer_classname = "FoodFinderProto";
option objc_class_prefix = "FF";

package foodfinder;

// The Food Finder service definition. This is the primary interface that the
// client calls.
service FoodFinder {
  rpc RequestSupplyInfo (SupplyRequest) returns (SupplyInfo) {}
}

// The Supplier service definition. This service contains an index of vendors
// and will only be called by the Food Finder service.
service Supplier {
  rpc RequestVendorInfo (SupplyRequest) returns (stream VendorInfo) {}
}

// The Vendor service definition. This service will be ran multiple times to
// simulate multiple vendors. It will contain a vendors current inventory and
// will only be called by the Food Finder service. 
service Vendor {
  rpc RequestInventoryInfo (SupplyRequest) returns (InventoryInfo) {}  
}

// The request message from a end user containing the name of a food items and
// the desired quantity
message SupplyRequest {
  string name = 1;
  uint32 quantity = 2;
}

// The response message from the Food Finder service containing a vendor and its
// inventory information
message SupplyInfo {
  InventoryInfo inventory = 1;
  VendorInfo vendor = 2;
}

// The response message from the Supplier service containing the name of a
// vendor and its URL
message VendorInfo {
  string url = 1;
  string name = 2;
}

// The response message from the Vendor service containing the price of an item
/ and its quantity
message InventoryInfo {
  float price = 1;
  uint32 quantity = 2;
}